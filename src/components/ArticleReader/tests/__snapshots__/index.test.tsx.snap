// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ArticleReader rendering dark theme should render correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <RNCWKWebView
    bounces={true}
    cacheEnabled={true}
    decelerationRate={0.998}
    javaScriptEnabled={false}
    messagingEnabled={false}
    onLoadingError={[Function]}
    onLoadingFinish={[Function]}
    onLoadingProgress={[Function]}
    onLoadingStart={[Function]}
    onMessage={[Function]}
    onNavigationStateChange={[Function]}
    onShouldStartLoadWithRequest={[Function]}
    source={
      Object {
        "baseUrl": "",
        "html": "
      <!DOCTYPE html>
      
      <head>
        <meta http-equiv=\\"content-type\\" content=\\"text/html; charset=utf-8\\">
        <meta name=\\"viewport\\" content=\\"width=device-width\\">
        <link href=\\"https://fonts.googleapis.com/css?family=PT+Sans:400,400i,700,700i|PT+Serif:400,400i,700,700i\\" rel=\\"stylesheet\\">
        <style type=\\"text/css\\">
          html {
            box-sizing: border-box;
          }
          *, *:before, *:after {
            box-sizing: inherit;
          }
          body {
            padding: 8px;
            font-size: 17px;
            font-family: 'PT Serif', serif;
            line-height: 1.5;
            color: #C5C5C5;
            font-weight: normal;
            word-break: break-word;
            background-color: #222222;
          }

          h1, h2, h3, h4, h5, h6, h7, h8 {
            line-height: 1.2;
            margin-top: 0;
            margin-bottom: 10px;
            color: #ffffff;
            font-family: 'PT Sans', sans-serif;
          }

          h1 {
            font-size: 24px;
            margin-bottom: 16px;
          }

          h2, h3, h4 {
            margin-top: 24px;
            font-size: 21px;
          }

          h5, h6, h7, h8 {
            margin-top: 24px;
            font-size 18px
          }

          p {
            margin-top: 0;
            text-align: justify;
          }

          a, strong {
            color: #ffffff;
          }

          img, figure {
            max-width: 100%;
            margin-bottom: 16px;
            margin-top: 16px;
            display: block;
          }

          blockquote {
            font-style: italic;
            color: #ffffff;
            margin-left: 24px;
            margin-right: 24px;
          }
          blockquote p {
            font-style: italic;
          }

          figcaption {
            display: none;
          }

          .meta-header {
            margin-bottom: 24px;
          }

          .meta-header strong {
            display: block;
            color: #C5C5C5;
            font-weight: normal;
          }

        </style>
      </head>
        <body>
          <h1>Incorporating Apple Maps with Autocomplete in a React Native Application</h1>
          <div class=\\"meta-header\\">
            <strong>Manny Shapir</strong>
            <strong><a href=\\"https://medium.com/better-programming/incorporating-apple-maps-with-autocomplete-in-a-react-native-application-31b56befef3\\">medium.com</a></strong>
          </div>
          <div id=\\"readability-page-1\\" class=\\"page\\"><div><div><h2>The How To to find where you are and where you’re going</h2><div><p><a href=\\"https://medium.com/@mshapir95?source=post_header_lockup\\"><img src=\\"https://cdn-images-1.medium.com/fit/c/100/100/1*nDKsNhsMdqqzDekEuJQDEA.jpeg\\"></a></p></div><figure><div><p><img src=\\"https://cdn-images-1.medium.com/freeze/max/60/1*8NUFmYFAPYYxIAcnDvb_VA.png?q=20\\"><img src=\\"https://cdn-images-1.medium.com/max/1600/1*8NUFmYFAPYYxIAcnDvb_VA.png\\"></p></div></figure><p>Maps do a wonderful job of giving users a feel for where they are and where they want to go next in a visual way. More often than not, applications that offer a service that revolves around location display a map on the screen to allow users a more interactive experience. To offer your own users the same experience in an iOS application developed in React Native, follow these steps!</p></div></div><div><div><h3>Step 1: Install Tools</h3><p>This tutorial will use the CocoaPods package manager for Xcode projects. To install CocoaPods, run:</p><p><code>sudo gem install cocoapods</code></p><h3>Step 2: Install Map Library</h3><p>In your terminal, navigate to your project directory and run the following command:</p><p><code>npm install react-native-maps --save</code></p><p>This will allow you to make use of React Native maps, with support for Google Maps, if desired, in your application.</p><h3>Step 3: Create Podfile and Install Pods</h3><p>A Podfile allows you to easily list and install the different dependencies you’d like to utilize in your project, similar to a Gemfile in Ruby. Create a Podfile in the <code>ios/</code> folder of your React Native project and use the following sample to get you started:</p><figure></figure><p>Once your Podfile is created with the correct dependencies, replace <code>_YOUR_PROJECT_TARGET_</code> with your project name and head back to your terminal and navigate to the iOS directory of your project (where you had created your Podfile) and run the command<code>pod install</code>.</p><p>This command will install all pods and create a new <code>.xcworkspace</code> file that you can use to build your project in Xcode. Alternatively, kick off a build by moving back to your root directory and running<code>cd ..</code> to navigate back to your root directory and <code>react-native run-ios</code> to run your application.</p><h3>Step 4: Add Map</h3><p>Once your dependencies are all added, we are ready to add a map to your application! Add the following import statement to the top of the map component:</p><pre>import MapView from 'react-native-maps';</pre><p>Add the following snippet to your render method to display a map with a fixed initial position:</p><figure></figure><p>You might notice that your map is nowhere to be found. This has to do with styling, so go ahead and add these static styles to be used in the view you are wrapping your container with:</p><figure></figure><p>These styles will set you up to incorporate the autocomplete component on the top of the screen. If it is not needed in your use case, feel free to stop here and simplify your style component to:</p><pre>const styles = StyleSheet.create({<br>  map: {<br>    ...StyleSheet.absoluteFillObject,<br>  },<br>});</pre><p>You might want to allow the displayed location to change. Maintaining map coordinates in state would allow you the flexibility of doing this:</p><figure></figure><p>After incorporating these bits and pieces, your component will look a lot like this:</p><figure></figure><p>Hopefully, your map loads successfully and navigates to an area in San Francisco!</p><h3>Step 5: Add Marker</h3><p>Markers allow users to visually pinpoint exactly where they are on the map. You may have noticed that our current map does not include such functionality, so let us go ahead and add one.</p><figure></figure><h3>Step 6: Install Places Autocomplete</h3><p>To allow users to interact more closely with the map, we want to use an autocomplete feature that takes an address and converts it to the coordinates needed to render the address on the map. Installing <code>react-native-google-places-autocomplete</code> will make this integration much easier.</p><p>To install, navigate back to your terminal and run in the root directory of your project: <code>npm install react-native-google-places-autocomplete --save</code>.</p><h3>Step 7: Add Autocomplete Component</h3><p>Now that we have React Native Places Autocomplete installed, let us add it to our map.</p><p>Add the following to your component:</p><figure></figure><p>Be sure to grab your <a href=\\"https://developers.google.com/places/web-service/get-api-key\\">Google Places API key</a> and add it to the <code>query</code> parameter of the component.</p><p>You will notice an input field at the top of your simulator screen — go ahead and begin typing an address and watch as suggestions will generate based on your input! The implementation above does not handle the address selection, but adding an onPress method would allow you to grab the selected address and pass it along as a parameter to the MapView rendering your map. This tweak will allow you to see the selected address rendered on the map.</p><p>That’s all it takes to incorporate Apple Maps into your application!</p></div></div></div>
        </body>
      </html>
    ",
      }
    }
    startInLoadingState={true}
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
        Object {
          "backgroundColor": "#222222",
        },
        Object {
          "flex": 0,
          "height": 0,
        },
      ]
    }
    useSharedProcessPool={true}
  />
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#F1F1F1",
          "bottom": 0,
          "flex": 1,
          "height": "100%",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": "100%",
        },
        Object {
          "backgroundColor": "#222222",
        },
      ]
    }
  >
    <ActivityIndicator
      animating={true}
      color="#999999"
      hidesWhenStopped={true}
      size="small"
    />
  </View>
</View>
`;

exports[`ArticleReader rendering default should render correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <RNCWKWebView
    bounces={true}
    cacheEnabled={true}
    decelerationRate={0.998}
    javaScriptEnabled={false}
    messagingEnabled={false}
    onLoadingError={[Function]}
    onLoadingFinish={[Function]}
    onLoadingProgress={[Function]}
    onLoadingStart={[Function]}
    onMessage={[Function]}
    onNavigationStateChange={[Function]}
    onShouldStartLoadWithRequest={[Function]}
    source={
      Object {
        "baseUrl": "",
        "html": "
      <!DOCTYPE html>
      
      <head>
        <meta http-equiv=\\"content-type\\" content=\\"text/html; charset=utf-8\\">
        <meta name=\\"viewport\\" content=\\"width=device-width\\">
        <link href=\\"https://fonts.googleapis.com/css?family=PT+Sans:400,400i,700,700i|PT+Serif:400,400i,700,700i\\" rel=\\"stylesheet\\">
        <style type=\\"text/css\\">
          html {
            box-sizing: border-box;
          }
          *, *:before, *:after {
            box-sizing: inherit;
          }
          body {
            padding: 8px;
            font-size: 17px;
            font-family: 'PT Serif', serif;
            line-height: 1.5;
            color: #000000;
            font-weight: normal;
            word-break: break-word;
            background-color: #ffffff;
          }

          h1, h2, h3, h4, h5, h6, h7, h8 {
            line-height: 1.2;
            margin-top: 0;
            margin-bottom: 10px;
            color: #000000;
            font-family: 'PT Sans', sans-serif;
          }

          h1 {
            font-size: 24px;
            margin-bottom: 16px;
          }

          h2, h3, h4 {
            margin-top: 24px;
            font-size: 21px;
          }

          h5, h6, h7, h8 {
            margin-top: 24px;
            font-size 18px
          }

          p {
            margin-top: 0;
            text-align: justify;
          }

          a, strong {
            color: #000000;
          }

          img, figure {
            max-width: 100%;
            margin-bottom: 16px;
            margin-top: 16px;
            display: block;
          }

          blockquote {
            font-style: italic;
            color: #000000;
            margin-left: 24px;
            margin-right: 24px;
          }
          blockquote p {
            font-style: italic;
          }

          figcaption {
            display: none;
          }

          .meta-header {
            margin-bottom: 24px;
          }

          .meta-header strong {
            display: block;
            color: #888888;
            font-weight: normal;
          }

        </style>
      </head>
        <body>
          <h1>Incorporating Apple Maps with Autocomplete in a React Native Application</h1>
          <div class=\\"meta-header\\">
            <strong>Manny Shapir</strong>
            <strong><a href=\\"https://medium.com/better-programming/incorporating-apple-maps-with-autocomplete-in-a-react-native-application-31b56befef3\\">medium.com</a></strong>
          </div>
          <div id=\\"readability-page-1\\" class=\\"page\\"><div><div><h2>The How To to find where you are and where you’re going</h2><div><p><a href=\\"https://medium.com/@mshapir95?source=post_header_lockup\\"><img src=\\"https://cdn-images-1.medium.com/fit/c/100/100/1*nDKsNhsMdqqzDekEuJQDEA.jpeg\\"></a></p></div><figure><div><p><img src=\\"https://cdn-images-1.medium.com/freeze/max/60/1*8NUFmYFAPYYxIAcnDvb_VA.png?q=20\\"><img src=\\"https://cdn-images-1.medium.com/max/1600/1*8NUFmYFAPYYxIAcnDvb_VA.png\\"></p></div></figure><p>Maps do a wonderful job of giving users a feel for where they are and where they want to go next in a visual way. More often than not, applications that offer a service that revolves around location display a map on the screen to allow users a more interactive experience. To offer your own users the same experience in an iOS application developed in React Native, follow these steps!</p></div></div><div><div><h3>Step 1: Install Tools</h3><p>This tutorial will use the CocoaPods package manager for Xcode projects. To install CocoaPods, run:</p><p><code>sudo gem install cocoapods</code></p><h3>Step 2: Install Map Library</h3><p>In your terminal, navigate to your project directory and run the following command:</p><p><code>npm install react-native-maps --save</code></p><p>This will allow you to make use of React Native maps, with support for Google Maps, if desired, in your application.</p><h3>Step 3: Create Podfile and Install Pods</h3><p>A Podfile allows you to easily list and install the different dependencies you’d like to utilize in your project, similar to a Gemfile in Ruby. Create a Podfile in the <code>ios/</code> folder of your React Native project and use the following sample to get you started:</p><figure></figure><p>Once your Podfile is created with the correct dependencies, replace <code>_YOUR_PROJECT_TARGET_</code> with your project name and head back to your terminal and navigate to the iOS directory of your project (where you had created your Podfile) and run the command<code>pod install</code>.</p><p>This command will install all pods and create a new <code>.xcworkspace</code> file that you can use to build your project in Xcode. Alternatively, kick off a build by moving back to your root directory and running<code>cd ..</code> to navigate back to your root directory and <code>react-native run-ios</code> to run your application.</p><h3>Step 4: Add Map</h3><p>Once your dependencies are all added, we are ready to add a map to your application! Add the following import statement to the top of the map component:</p><pre>import MapView from 'react-native-maps';</pre><p>Add the following snippet to your render method to display a map with a fixed initial position:</p><figure></figure><p>You might notice that your map is nowhere to be found. This has to do with styling, so go ahead and add these static styles to be used in the view you are wrapping your container with:</p><figure></figure><p>These styles will set you up to incorporate the autocomplete component on the top of the screen. If it is not needed in your use case, feel free to stop here and simplify your style component to:</p><pre>const styles = StyleSheet.create({<br>  map: {<br>    ...StyleSheet.absoluteFillObject,<br>  },<br>});</pre><p>You might want to allow the displayed location to change. Maintaining map coordinates in state would allow you the flexibility of doing this:</p><figure></figure><p>After incorporating these bits and pieces, your component will look a lot like this:</p><figure></figure><p>Hopefully, your map loads successfully and navigates to an area in San Francisco!</p><h3>Step 5: Add Marker</h3><p>Markers allow users to visually pinpoint exactly where they are on the map. You may have noticed that our current map does not include such functionality, so let us go ahead and add one.</p><figure></figure><h3>Step 6: Install Places Autocomplete</h3><p>To allow users to interact more closely with the map, we want to use an autocomplete feature that takes an address and converts it to the coordinates needed to render the address on the map. Installing <code>react-native-google-places-autocomplete</code> will make this integration much easier.</p><p>To install, navigate back to your terminal and run in the root directory of your project: <code>npm install react-native-google-places-autocomplete --save</code>.</p><h3>Step 7: Add Autocomplete Component</h3><p>Now that we have React Native Places Autocomplete installed, let us add it to our map.</p><p>Add the following to your component:</p><figure></figure><p>Be sure to grab your <a href=\\"https://developers.google.com/places/web-service/get-api-key\\">Google Places API key</a> and add it to the <code>query</code> parameter of the component.</p><p>You will notice an input field at the top of your simulator screen — go ahead and begin typing an address and watch as suggestions will generate based on your input! The implementation above does not handle the address selection, but adding an onPress method would allow you to grab the selected address and pass it along as a parameter to the MapView rendering your map. This tweak will allow you to see the selected address rendered on the map.</p><p>That’s all it takes to incorporate Apple Maps into your application!</p></div></div></div>
        </body>
      </html>
    ",
      }
    }
    startInLoadingState={true}
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
        Object {
          "flex": 0,
          "height": 0,
        },
      ]
    }
    useSharedProcessPool={true}
  />
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#F1F1F1",
          "bottom": 0,
          "flex": 1,
          "height": "100%",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": "100%",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
      ]
    }
  >
    <ActivityIndicator
      animating={true}
      color="#999999"
      hidesWhenStopped={true}
      size="small"
    />
  </View>
</View>
`;

exports[`ArticleReader rendering no article URL should render no article URL link 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <RNCWKWebView
    bounces={true}
    cacheEnabled={true}
    decelerationRate={0.998}
    javaScriptEnabled={false}
    messagingEnabled={false}
    onLoadingError={[Function]}
    onLoadingFinish={[Function]}
    onLoadingProgress={[Function]}
    onLoadingStart={[Function]}
    onMessage={[Function]}
    onNavigationStateChange={[Function]}
    onShouldStartLoadWithRequest={[Function]}
    source={
      Object {
        "baseUrl": "",
        "html": "
      <!DOCTYPE html>
        
      <head>
        <meta http-equiv=\\"content-type\\" content=\\"text/html; charset=utf-8\\">
        <meta name=\\"viewport\\" content=\\"width=device-width\\">
        <link href=\\"https://fonts.googleapis.com/css?family=PT+Sans:400,400i,700,700i|PT+Serif:400,400i,700,700i\\" rel=\\"stylesheet\\">
        <style type=\\"text/css\\">
          html {
            box-sizing: border-box;
          }
          *, *:before, *:after {
            box-sizing: inherit;
          }
          body {
            padding: 8px;
            font-size: 17px;
            font-family: 'PT Serif', serif;
            line-height: 1.5;
            color: #000000;
            font-weight: normal;
            word-break: break-word;
            background-color: #ffffff;
          }

          h1, h2, h3, h4, h5, h6, h7, h8 {
            line-height: 1.2;
            margin-top: 0;
            margin-bottom: 10px;
            color: #000000;
            font-family: 'PT Sans', sans-serif;
          }

          h1 {
            font-size: 24px;
            margin-bottom: 16px;
          }

          h2, h3, h4 {
            margin-top: 24px;
            font-size: 21px;
          }

          h5, h6, h7, h8 {
            margin-top: 24px;
            font-size 18px
          }

          p {
            margin-top: 0;
            text-align: justify;
          }

          a, strong {
            color: #000000;
          }

          img, figure {
            max-width: 100%;
            margin-bottom: 16px;
            margin-top: 16px;
            display: block;
          }

          blockquote {
            font-style: italic;
            color: #000000;
            margin-left: 24px;
            margin-right: 24px;
          }
          blockquote p {
            font-style: italic;
          }

          figcaption {
            display: none;
          }

          .meta-header {
            margin-bottom: 24px;
          }

          .meta-header strong {
            display: block;
            color: #888888;
            font-weight: normal;
          }

        </style>
      </head>
        <body>
          <h1>Insufficient article data</h1>
          <p>The article did not return any sufficient content to show. This could happen when the article is behind a pay-wall or requires a login.</p>
          
        </body>
      </html>
    ",
      }
    }
    startInLoadingState={true}
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
        Object {
          "flex": 0,
          "height": 0,
        },
      ]
    }
    useSharedProcessPool={true}
  />
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#F1F1F1",
          "bottom": 0,
          "flex": 1,
          "height": "100%",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": "100%",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
      ]
    }
  >
    <ActivityIndicator
      animating={true}
      color="#999999"
      hidesWhenStopped={true}
      size="small"
    />
  </View>
</View>
`;

exports[`ArticleReader rendering no author name should render no authorName when it is not present 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <RNCWKWebView
    bounces={true}
    cacheEnabled={true}
    decelerationRate={0.998}
    javaScriptEnabled={false}
    messagingEnabled={false}
    onLoadingError={[Function]}
    onLoadingFinish={[Function]}
    onLoadingProgress={[Function]}
    onLoadingStart={[Function]}
    onMessage={[Function]}
    onNavigationStateChange={[Function]}
    onShouldStartLoadWithRequest={[Function]}
    source={
      Object {
        "baseUrl": "",
        "html": "
      <!DOCTYPE html>
        
      <head>
        <meta http-equiv=\\"content-type\\" content=\\"text/html; charset=utf-8\\">
        <meta name=\\"viewport\\" content=\\"width=device-width\\">
        <link href=\\"https://fonts.googleapis.com/css?family=PT+Sans:400,400i,700,700i|PT+Serif:400,400i,700,700i\\" rel=\\"stylesheet\\">
        <style type=\\"text/css\\">
          html {
            box-sizing: border-box;
          }
          *, *:before, *:after {
            box-sizing: inherit;
          }
          body {
            padding: 8px;
            font-size: 17px;
            font-family: 'PT Serif', serif;
            line-height: 1.5;
            color: #000000;
            font-weight: normal;
            word-break: break-word;
            background-color: #ffffff;
          }

          h1, h2, h3, h4, h5, h6, h7, h8 {
            line-height: 1.2;
            margin-top: 0;
            margin-bottom: 10px;
            color: #000000;
            font-family: 'PT Sans', sans-serif;
          }

          h1 {
            font-size: 24px;
            margin-bottom: 16px;
          }

          h2, h3, h4 {
            margin-top: 24px;
            font-size: 21px;
          }

          h5, h6, h7, h8 {
            margin-top: 24px;
            font-size 18px
          }

          p {
            margin-top: 0;
            text-align: justify;
          }

          a, strong {
            color: #000000;
          }

          img, figure {
            max-width: 100%;
            margin-bottom: 16px;
            margin-top: 16px;
            display: block;
          }

          blockquote {
            font-style: italic;
            color: #000000;
            margin-left: 24px;
            margin-right: 24px;
          }
          blockquote p {
            font-style: italic;
          }

          figcaption {
            display: none;
          }

          .meta-header {
            margin-bottom: 24px;
          }

          .meta-header strong {
            display: block;
            color: #888888;
            font-weight: normal;
          }

        </style>
      </head>
        <body>
          <h1>Insufficient article data</h1>
          <p>The article did not return any sufficient content to show. This could happen when the article is behind a pay-wall or requires a login.</p>
          <a href=\\"https://link.medium.com/3atUMQ6eBX\\">View the original article</a>
        </body>
      </html>
    ",
      }
    }
    startInLoadingState={true}
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
        Object {
          "flex": 0,
          "height": 0,
        },
      ]
    }
    useSharedProcessPool={true}
  />
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#F1F1F1",
          "bottom": 0,
          "flex": 1,
          "height": "100%",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": "100%",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
      ]
    }
  >
    <ActivityIndicator
      animating={true}
      color="#999999"
      hidesWhenStopped={true}
      size="small"
    />
  </View>
</View>
`;

exports[`ArticleReader rendering no html should render a different HTML output when the article has not HTML 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <RNCWKWebView
    bounces={true}
    cacheEnabled={true}
    decelerationRate={0.998}
    javaScriptEnabled={false}
    messagingEnabled={false}
    onLoadingError={[Function]}
    onLoadingFinish={[Function]}
    onLoadingProgress={[Function]}
    onLoadingStart={[Function]}
    onMessage={[Function]}
    onNavigationStateChange={[Function]}
    onShouldStartLoadWithRequest={[Function]}
    source={
      Object {
        "baseUrl": "",
        "html": "
      <!DOCTYPE html>
        
      <head>
        <meta http-equiv=\\"content-type\\" content=\\"text/html; charset=utf-8\\">
        <meta name=\\"viewport\\" content=\\"width=device-width\\">
        <link href=\\"https://fonts.googleapis.com/css?family=PT+Sans:400,400i,700,700i|PT+Serif:400,400i,700,700i\\" rel=\\"stylesheet\\">
        <style type=\\"text/css\\">
          html {
            box-sizing: border-box;
          }
          *, *:before, *:after {
            box-sizing: inherit;
          }
          body {
            padding: 8px;
            font-size: 17px;
            font-family: 'PT Serif', serif;
            line-height: 1.5;
            color: #000000;
            font-weight: normal;
            word-break: break-word;
            background-color: #ffffff;
          }

          h1, h2, h3, h4, h5, h6, h7, h8 {
            line-height: 1.2;
            margin-top: 0;
            margin-bottom: 10px;
            color: #000000;
            font-family: 'PT Sans', sans-serif;
          }

          h1 {
            font-size: 24px;
            margin-bottom: 16px;
          }

          h2, h3, h4 {
            margin-top: 24px;
            font-size: 21px;
          }

          h5, h6, h7, h8 {
            margin-top: 24px;
            font-size 18px
          }

          p {
            margin-top: 0;
            text-align: justify;
          }

          a, strong {
            color: #000000;
          }

          img, figure {
            max-width: 100%;
            margin-bottom: 16px;
            margin-top: 16px;
            display: block;
          }

          blockquote {
            font-style: italic;
            color: #000000;
            margin-left: 24px;
            margin-right: 24px;
          }
          blockquote p {
            font-style: italic;
          }

          figcaption {
            display: none;
          }

          .meta-header {
            margin-bottom: 24px;
          }

          .meta-header strong {
            display: block;
            color: #888888;
            font-weight: normal;
          }

        </style>
      </head>
        <body>
          <h1>Insufficient article data</h1>
          <p>The article did not return any sufficient content to show. This could happen when the article is behind a pay-wall or requires a login.</p>
          <a href=\\"https://link.medium.com/3atUMQ6eBX\\">View the original article</a>
        </body>
      </html>
    ",
      }
    }
    startInLoadingState={true}
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
        Object {
          "flex": 0,
          "height": 0,
        },
      ]
    }
    useSharedProcessPool={true}
  />
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "#F1F1F1",
          "bottom": 0,
          "flex": 1,
          "height": "100%",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": "100%",
        },
        Object {
          "backgroundColor": "#ffffff",
        },
      ]
    }
  >
    <ActivityIndicator
      animating={true}
      color="#999999"
      hidesWhenStopped={true}
      size="small"
    />
  </View>
</View>
`;
